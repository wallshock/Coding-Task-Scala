[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\rudy7\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\rudy7\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.2 (Amazon.com Inc. Java 17.0.4.1)
[debug]       Load.loadUnit: plugins took 84.6858ms
[debug]       Load.loadUnit: defsScala took 0.252ms
[debug] [Loading] Scanning directory C:\Users\rudy7\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\rudy7\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 10.9033 ms
[debug]           Load.resolveProject(global-plugins) took 37.0955ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\rudy7\.sbt\1.0\plugins, plugins: List(<none>))) took 65.1584ms
[debug] [Loading] Done in C:\Users\rudy7\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 83.2967ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.189ms
[debug]     Load.loadUnit(file:/C:/Users/rudy7/.sbt/1.0/plugins/, ...) took 175.6048ms
[debug]   Load.apply: load took 349.7647ms
[debug]   Load.apply: resolveProjects took 5.0355ms
[debug]   Load.apply: finalTransforms took 51.2917ms
[debug]   Load.apply: config.delegates took 7.3004ms
[debug]   Load.apply: Def.make(settings)... took 441.6281ms
[debug]   Load.apply: structureIndex took 80.7961ms
[debug]   Load.apply: mkStreams took 1.235ms
[info] loading global plugins from C:\Users\rudy7\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 7585.4032ms
[debug]           Load.loadUnit: plugins took 27.3476ms
[debug]           Load.loadUnit: defsScala took 0.0041ms
[debug] [Loading] Scanning directory C:\Users\rudy7\IdeaProjects\CodingTaskOcado\project
[debug]             Load.loadUnit: mkEval took 6.0079ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\rudy7\IdeaProjects\CodingTaskOcado\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.8829 ms
[info] loading settings for project codingtaskocado-build from idea.sbt ...
[debug]               Load.resolveProject(codingtaskocado-build) took 2.2939ms
[debug]             Load.loadTransitive: finalizeProject(Project(id codingtaskocado-build, base: C:\Users\rudy7\IdeaProjects\CodingTaskOcado\project, plugins: List(<none>))) took 4.5546ms
[debug] [Loading] Done in C:\Users\rudy7\IdeaProjects\CodingTaskOcado\project, returning: (codingtaskocado-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2323.7324ms
[debug]           Load.loadUnit: cleanEvalClasses took 5.1004ms
[debug]         Load.loadUnit(file:/C:/Users/rudy7/IdeaProjects/CodingTaskOcado/project/, ...) took 2357.2566ms
[debug]       Load.apply: load took 2358.8498ms
[debug]       Load.apply: resolveProjects took 0.0865ms
[debug]       Load.apply: finalTransforms took 13.3196ms
[debug]       Load.apply: config.delegates took 0.3613ms
[debug]       Load.apply: Def.make(settings)... took 86.9214ms
[debug]       Load.apply: structureIndex took 26.0931ms
[debug]       Load.apply: mkStreams took 0.002ms
[info] loading project definition from C:\Users\rudy7\IdeaProjects\CodingTaskOcado\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 4976.4958ms
[debug]     Load.loadUnit: defsScala took 0.003ms
[debug] [Loading] Scanning directory C:\Users\rudy7\IdeaProjects\CodingTaskOcado
[debug]       Load.loadUnit: mkEval took 0.235ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.5472 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 26.1119ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\rudy7\IdeaProjects\CodingTaskOcado, plugins: List(<none>))) took 28.9632ms
[debug] [Loading] Done in C:\Users\rudy7\IdeaProjects\CodingTaskOcado, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 1552.1219ms
[debug]     Load.loadUnit: cleanEvalClasses took 27.8194ms
[debug]   Load.loadUnit(file:/C:/Users/rudy7/IdeaProjects/CodingTaskOcado/, ...) took 6557.232ms
[debug] Load.apply: load took 6559.2072ms
[debug] Load.apply: resolveProjects took 0.0811ms
[debug] Load.apply: finalTransforms took 22.1499ms
[debug] Load.apply: config.delegates took 0.2473ms
[debug] Load.apply: Def.make(settings)... took 67.4524ms
[debug] Load.apply: structureIndex took 23.015ms
[debug] Load.apply: mkStreams took 0.0016ms
[info] set current project to untitled (in build file:/C:/Users/rudy7/IdeaProjects/CodingTaskOcado/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 50025 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 50025, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to untitled (in build file:/C:/Users/rudy7/IdeaProjects/CodingTaskOcado/)
[debug] > Exec(idea-shell, None, None)
